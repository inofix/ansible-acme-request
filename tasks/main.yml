---
# tasks file for acme-request/

- name: 'Prepare the target dir where a service finds the certificate'
  file:
    state: directory
    path: '{{ acme__cert_path }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
  with_items: '{{ acme__domain }}'

- name: 'Create private keys'
  shell: "umask 077 && /usr/bin/openssl genrsa '{{ acme__key_length }}' > '{{ acme__key }}'"
  args:
    creates: '{{ acme__key }}'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__key: '{{ acme__config_dir }}/{{ acme__cert_name }}.key'
  with_items: '{{ acme__locally_requested }}'

- name: 'Private key permissions'
  file:
    path: '{{ acme__key }}'
    owner: 'root'
    group: 'root'
    mode: '0600'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__key: '{{ acme__config_dir }}/{{ acme__cert_name }}.key'
  with_items: '{{ acme__locally_requested }}'

- name: 'Remove any existing certificate request'
  file:
    path: '{{ acme__request }}'
    state: 'absent'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__request: '{{ acme__config_dir }}/{{ acme__cert_name }}.csr'
  with_items: '{{ acme__locally_requested }}'

- name: 'Create new certificate requests'
  shell: '{{ acme__openssl_req }}'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__key: '{{ acme__config_dir }}/{{ acme__cert_name }}.key'
    acme__request: '{{ acme__config_dir }}/{{ acme__cert_name }}.csr'
    acme__openssl_single: '/usr/bin/openssl req -new -sha256 -key {{ acme__key }} -subj "/CN={{ item.domain }}" > {{ acme__request }}'
    acme__openssl_multi: '/usr/bin/openssl req -new -sha256 -key {{ acme__key }} -subj "/" -reqexts SAN -config <(cat {{ acme__openssl_config }} <(printf "[SAN]\nsubjectAltName=DNS:{{ item.domain | join(",DNS:") }}")) > {{ acme__request }}'
    acme__openssl_req: '{{ acme__openssl_multi
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else acme__openssl_single }}'
  args:
##TODO test if really needed..
    executable: '/bin/bash'
    creates: '{{ acme__request }}'
  with_items: '{{ acme__locally_requested }}'

- name: 'Fetch all requests that will be signed on a remote host'
  fetch:
    src: '{{ acme__config_dir }}/{{ acme__cert_name }}.csr'
    dest: '{{ acme__local_workdir }}'
    fail_on_missing: 'yes'
    flat: 'no'
    validate_checksum: 'yes'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
  with_items: '{{ acme__remotely_signed }}'

- name: 'Copy all requests that were requested on a remote host'
  copy:
    src: '{{ acme__local_workdir }}/{{ item.request }}/{{ acme__config_dir }}/{{ acme__cert_name }}.csr'
    dest: '{{ acme__config_dir }}/{{ acme__cert_name }}.csr'
    backup: 'no'
    force: 'yes'
    owner: '{{ acme__user }}'
    group: '{{ acme__group }}'
    mode: '0644'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if ( item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
  with_items: '{{ acme__remotely_requested }}'

- name: 'Allow access to the user "acme" from the remote hosts to the cert it requested'
  lineinfile:
    dest: '{{ acme__home }}/.ssh/authorized_keys'
    line: 'command="/usr/local/bin//acme-wrapper.sh" {{ lookup("file", acme__key_file) }}'
    create: 'yes'
    owner: '{{ acme__user }}'
    group: '{{ acme__group }}'
    mode: '0600'
  vars:
    acme__key_file: '{{ acme__local_workdir }}/{{ item.request }}/{{ acme__home }}/.ssh/id_{{ acme__ssh_keytype }}.pub'
  with_items: '{{ acme__remotely_requested }}'

- name: 'Create an empty (or just touch) cert, which the user "acme" is able to write'
  file:
    state: touch
    path: '{{ acme__certificate }}'
    owner: '{{ acme__user }}'
    group: '{{ acme__group }}'
    mode: '0644'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__certificate: '{{ acme__cert_path }}.crt'
  with_items: '{{ acme__domain }}'

- name: 'Create a consumer key file'
  copy:
    remote_src: True
    src: '{{ acme__key }}'
    dest: '{{ acme__target_key }}'
    owner: 'root'
    group: '{{ acme__os__cert_group }}'
    mode: '0640'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__key: '{{ acme__cert_path }}.key'
    acme__target_key: '{{ acme__cert_path }}/{{ acme__cert_name }}.key'
  with_items: '{{ acme__locally_requested }}'

- name: 'Create an empty (or just touch) consumable cert, which the user "acme" is able to write'
  file:
    state: touch
    path: '{{ acme__target_certificate }}'
    owner: '{{ acme__user }}'
    group: '{{ acme__group }}'
    mode: '0644'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__target_certificate: '{{ acme__cert_path }}/{{ acme__cert_name }}.crt'
  with_items: '{{ acme__locally_requested }}'

- name: 'Create an empty (or just touch) consumable chain cert, which the user "acme" is able to write'
  file:
    state: touch
    path: '{{ acme__target_chain }}'
    owner: '{{ acme__user }}'
    group: '{{ acme__group }}'
    mode: '0644'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__target_chain: '{{ acme__cert_path }}/{{ acme__cert_name }}_chain.crt'
  with_items: '{{ acme__domain }}'
